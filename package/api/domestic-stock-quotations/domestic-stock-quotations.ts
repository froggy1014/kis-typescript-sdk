/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Korea Investment API
 * 
[OpenAPI json 링크](http://localhost:8080/swagger.json)

[API 문서 링크](https://api.koreainvestment.com/openapi/docs)

## 🔐 인증 방법
1. **상단의 "Authorize" 버튼을 클릭**하여 API 키들을 입력하세요
2. 필요한 헤더 정보:
   - **appkey**: 한국투자증권에서 발급받은 앱키
   - **appsecret**: 한국투자증권에서 발급받은 앱시크릿
   - **tr_id**: API별 고유 거래ID (각 API 문서 참조)
   - **custtype**: 고객타입 (P: 개인, B: 법인)

## 🚀 사용 방법
- OAuth API는 appkey, appsecret만 필요
- 시세 조회 API는 모든 헤더 정보 필요
- WebSocket 연결 시에는 별도 접속키 발급 필요
			
 * OpenAPI spec version: 1.0.0
 */
import type {
  AskingPriceExpectedResponse,
  DailyChartResponse,
  DailyPriceResponse,
  DetailedPriceResponse,
  ETFComponentStockResponse,
  ETFETNCurrentPriceResponse,
  ExpectedClosingPriceResponse,
  GetUapiDomesticStockV1QuotationsExpClosingPriceParams,
  GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnParams,
  GetUapiDomesticStockV1QuotationsInquireCcnlParams,
  GetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceParams,
  GetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceParams,
  GetUapiDomesticStockV1QuotationsInquireDailyPriceParams,
  GetUapiDomesticStockV1QuotationsInquireInvestorParams,
  GetUapiDomesticStockV1QuotationsInquireMemberParams,
  GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceParams,
  GetUapiDomesticStockV1QuotationsInquireOvertimePriceParams,
  GetUapiDomesticStockV1QuotationsInquirePrice2Params,
  GetUapiDomesticStockV1QuotationsInquirePriceParams,
  GetUapiDomesticStockV1QuotationsInquireTimeDailychartpriceParams,
  GetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceParams,
  GetUapiDomesticStockV1QuotationsInquireTimeItemconclusionParams,
  GetUapiEtfetnV1QuotationsInquireComponentStockPriceParams,
  GetUapiEtfetnV1QuotationsInquirePriceParams,
  GetUapiEtfetnV1QuotationsNavComparisonDailyTrendParams,
  GetUapiEtfetnV1QuotationsNavComparisonTimeTrendParams,
  GetUapiEtfetnV1QuotationsNavComparisonTrendParams,
  IntradayChartResponse,
  InvestorResponse,
  MemberResponse,
  NAVComparisonDailyTrendResponse,
  NAVComparisonTimeTrendResponse,
  NAVComparisonTrendResponse,
  OvertimeAskingPriceResponse,
  OvertimeDailyPriceResponse,
  OvertimePriceResponse,
  PeriodChartResponse,
  StockCurrentPriceResponse,
  TimeTransactionResponse,
  TransactionResponse
} from '../../model';

import { kisInstance } from '../../mutator/kis-instance';



  /**
 * 국내주식의 현재가 시세 정보를 조회합니다

**TR_ID:** FHKST01010100 (실전/모의 동일)
 * @summary 주식현재가 시세
 */
export const getUapiDomesticStockV1QuotationsInquirePrice = (
    params: GetUapiDomesticStockV1QuotationsInquirePriceParams,
 ) => {
      return kisInstance<StockCurrentPriceResponse>(
      {url: `/uapi/domestic-stock/v1/quotations/inquire-price`, method: 'GET',
        params
    },
      );
    }
  /**
 * 주식의 추가 시세 정보를 조회합니다 (TR_ID: FHPST01010000)
 * @summary 주식현재가 시세2
 */
export const getUapiDomesticStockV1QuotationsInquirePrice2 = (
    params: GetUapiDomesticStockV1QuotationsInquirePrice2Params,
 ) => {
      return kisInstance<DetailedPriceResponse>(
      {url: `/uapi/domestic-stock/v1/quotations/inquire-price-2`, method: 'GET',
        params
    },
      );
    }
  /**
 * 주식의 체결 내역 정보를 조회합니다 (TR_ID: FHKST01010300)
 * @summary 주식현재가 체결
 */
export const getUapiDomesticStockV1QuotationsInquireCcnl = (
    params: GetUapiDomesticStockV1QuotationsInquireCcnlParams,
 ) => {
      return kisInstance<TransactionResponse>(
      {url: `/uapi/domestic-stock/v1/quotations/inquire-ccnl`, method: 'GET',
        params
    },
      );
    }
  /**
 * 주식의 일자별 시세 정보를 조회합니다 (TR_ID: FHKST01010400)
 * @summary 주식현재가 일자별
 */
export const getUapiDomesticStockV1QuotationsInquireDailyPrice = (
    params: GetUapiDomesticStockV1QuotationsInquireDailyPriceParams,
 ) => {
      return kisInstance<DailyPriceResponse>(
      {url: `/uapi/domestic-stock/v1/quotations/inquire-daily-price`, method: 'GET',
        params
    },
      );
    }
  /**
 * 주식의 호가 정보와 예상체결 정보를 조회합니다 (TR_ID: FHKST01010200)
 * @summary 주식현재가 호가/예상체결
 */
export const getUapiDomesticStockV1QuotationsInquireAskingPriceExpCcn = (
    params: GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnParams,
 ) => {
      return kisInstance<AskingPriceExpectedResponse>(
      {url: `/uapi/domestic-stock/v1/quotations/inquire-asking-price-exp-ccn`, method: 'GET',
        params
    },
      );
    }
  /**
 * 주식의 투자자별 매매 동향을 조회합니다 (TR_ID: FHKST01010900)
 * @summary 주식현재가 투자자
 */
export const getUapiDomesticStockV1QuotationsInquireInvestor = (
    params: GetUapiDomesticStockV1QuotationsInquireInvestorParams,
 ) => {
      return kisInstance<InvestorResponse>(
      {url: `/uapi/domestic-stock/v1/quotations/inquire-investor`, method: 'GET',
        params
    },
      );
    }
  /**
 * 주식의 회원사별 매매 동향을 조회합니다 (TR_ID: FHKST01010600)
 * @summary 주식현재가 회원사
 */
export const getUapiDomesticStockV1QuotationsInquireMember = (
    params: GetUapiDomesticStockV1QuotationsInquireMemberParams,
 ) => {
      return kisInstance<MemberResponse>(
      {url: `/uapi/domestic-stock/v1/quotations/inquire-member`, method: 'GET',
        params
    },
      );
    }
  /**
 * 주식의 기간별 차트 데이터를 조회합니다 (TR_ID: FHKST03010100)
 * @summary 국내주식기간별시세(일/주/월/년)
 */
export const getUapiDomesticStockV1QuotationsInquireDailyItemchartprice = (
    params: GetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceParams,
 ) => {
      return kisInstance<PeriodChartResponse>(
      {url: `/uapi/domestic-stock/v1/quotations/inquire-daily-itemchartprice`, method: 'GET',
        params
    },
      );
    }
  /**
 * 주식의 당일 분봉 차트 데이터를 조회합니다 (TR_ID: FHKST03010200)
 * @summary 주식당일분봉조회
 */
export const getUapiDomesticStockV1QuotationsInquireTimeItemchartprice = (
    params: GetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceParams,
 ) => {
      return kisInstance<IntradayChartResponse>(
      {url: `/uapi/domestic-stock/v1/quotations/inquire-time-itemchartprice`, method: 'GET',
        params
    },
      );
    }
  /**
 * 주식의 시간대별 체결 내역을 조회합니다 (TR_ID: FHPST01060000)
 * @summary 주식현재가 당일시간대별체결
 */
export const getUapiDomesticStockV1QuotationsInquireTimeItemconclusion = (
    params: GetUapiDomesticStockV1QuotationsInquireTimeItemconclusionParams,
 ) => {
      return kisInstance<TimeTransactionResponse>(
      {url: `/uapi/domestic-stock/v1/quotations/inquire-time-itemconclusion`, method: 'GET',
        params
    },
      );
    }
  /**
 * 주식의 시간외 현재가 정보를 조회합니다 (TR_ID: FHPST02300000)
 * @summary 국내주식 시간외현재가
 */
export const getUapiDomesticStockV1QuotationsInquireOvertimePrice = (
    params: GetUapiDomesticStockV1QuotationsInquireOvertimePriceParams,
 ) => {
      return kisInstance<OvertimePriceResponse>(
      {url: `/uapi/domestic-stock/v1/quotations/inquire-overtime-price`, method: 'GET',
        params
    },
      );
    }
  /**
 * ETF의 구성종목 시세 정보를 조회합니다 (TR_ID: FHKST121600C0)
 * @summary ETF 구성종목시세
 */
export const getUapiEtfetnV1QuotationsInquireComponentStockPrice = (
    params: GetUapiEtfetnV1QuotationsInquireComponentStockPriceParams,
 ) => {
      return kisInstance<ETFComponentStockResponse>(
      {url: `/uapi/etfetn/v1/quotations/inquire-component-stock-price`, method: 'GET',
        params
    },
      );
    }
  /**
 * ETF/ETN의 NAV 비교추이를 종목별로 조회합니다 (TR_ID: FHPST02440000)
 * @summary NAV 비교추이(종목)
 */
export const getUapiEtfetnV1QuotationsNavComparisonTrend = (
    params: GetUapiEtfetnV1QuotationsNavComparisonTrendParams,
 ) => {
      return kisInstance<NAVComparisonTrendResponse>(
      {url: `/uapi/etfetn/v1/quotations/nav-comparison-trend`, method: 'GET',
        params
    },
      );
    }
  /**
 * 주식의 시간외 일자별 주가 정보를 조회합니다 (TR_ID: FHPST02320000)
 * @summary 주식현재가 시간외일자별주가
 */
export const getUapiDomesticStockV1QuotationsInquireDailyOvertimeprice = (
    params: GetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceParams,
 ) => {
      return kisInstance<OvertimeDailyPriceResponse>(
      {url: `/uapi/domestic-stock/v1/quotations/inquire-daily-overtimeprice`, method: 'GET',
        params
    },
      );
    }
  /**
 * 주식의 시간외 호가 정보를 조회합니다 (TR_ID: FHPST02300400)
 * @summary 국내주식 시간외호가
 */
export const getUapiDomesticStockV1QuotationsInquireOvertimeAskingPrice = (
    params: GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceParams,
 ) => {
      return kisInstance<OvertimeAskingPriceResponse>(
      {url: `/uapi/domestic-stock/v1/quotations/inquire-overtime-asking-price`, method: 'GET',
        params
    },
      );
    }
  /**
 * 주식의 일별 분봉 차트 데이터를 조회합니다 (TR_ID: FHKST03010230)
 * @summary 주식일별분봉조회
 */
export const getUapiDomesticStockV1QuotationsInquireTimeDailychartprice = (
    params: GetUapiDomesticStockV1QuotationsInquireTimeDailychartpriceParams,
 ) => {
      return kisInstance<DailyChartResponse>(
      {url: `/uapi/domestic-stock/v1/quotations/inquire-time-dailychartprice`, method: 'GET',
        params
    },
      );
    }
  /**
 * ETF/ETN의 NAV 비교추이를 일별로 조회합니다 (TR_ID: FHPST02440200)
 * @summary NAV 비교추이(일)
 */
export const getUapiEtfetnV1QuotationsNavComparisonDailyTrend = (
    params: GetUapiEtfetnV1QuotationsNavComparisonDailyTrendParams,
 ) => {
      return kisInstance<NAVComparisonDailyTrendResponse>(
      {url: `/uapi/etfetn/v1/quotations/nav-comparison-daily-trend`, method: 'GET',
        params
    },
      );
    }
  /**
 * ETF/ETN의 NAV 비교추이를 분별로 조회합니다 (TR_ID: FHPST02440100)
 * @summary NAV 비교추이(분)
 */
export const getUapiEtfetnV1QuotationsNavComparisonTimeTrend = (
    params: GetUapiEtfetnV1QuotationsNavComparisonTimeTrendParams,
 ) => {
      return kisInstance<NAVComparisonTimeTrendResponse>(
      {url: `/uapi/etfetn/v1/quotations/nav-comparison-time-trend`, method: 'GET',
        params
    },
      );
    }
  /**
 * ETF/ETN의 현재가 정보를 조회합니다 (TR_ID: FHPST02400000)
 * @summary ETF/ETN 현재가
 */
export const getUapiEtfetnV1QuotationsInquirePrice = (
    params: GetUapiEtfetnV1QuotationsInquirePriceParams,
 ) => {
      return kisInstance<ETFETNCurrentPriceResponse>(
      {url: `/uapi/etfetn/v1/quotations/inquire-price`, method: 'GET',
        params
    },
      );
    }
  /**
 * 국내주식의 장마감 예상체결가를 조회합니다 (TR_ID: FHKST117300C0)
 * @summary 국내주식 장마감 예상체결가
 */
export const getUapiDomesticStockV1QuotationsExpClosingPrice = (
    params: GetUapiDomesticStockV1QuotationsExpClosingPriceParams,
 ) => {
      return kisInstance<ExpectedClosingPriceResponse>(
      {url: `/uapi/domestic-stock/v1/quotations/exp-closing-price`, method: 'GET',
        params
    },
      );
    }
  export type GetUapiDomesticStockV1QuotationsInquirePriceResult = NonNullable<Awaited<ReturnType<typeof getUapiDomesticStockV1QuotationsInquirePrice>>>
export type GetUapiDomesticStockV1QuotationsInquirePrice2Result = NonNullable<Awaited<ReturnType<typeof getUapiDomesticStockV1QuotationsInquirePrice2>>>
export type GetUapiDomesticStockV1QuotationsInquireCcnlResult = NonNullable<Awaited<ReturnType<typeof getUapiDomesticStockV1QuotationsInquireCcnl>>>
export type GetUapiDomesticStockV1QuotationsInquireDailyPriceResult = NonNullable<Awaited<ReturnType<typeof getUapiDomesticStockV1QuotationsInquireDailyPrice>>>
export type GetUapiDomesticStockV1QuotationsInquireAskingPriceExpCcnResult = NonNullable<Awaited<ReturnType<typeof getUapiDomesticStockV1QuotationsInquireAskingPriceExpCcn>>>
export type GetUapiDomesticStockV1QuotationsInquireInvestorResult = NonNullable<Awaited<ReturnType<typeof getUapiDomesticStockV1QuotationsInquireInvestor>>>
export type GetUapiDomesticStockV1QuotationsInquireMemberResult = NonNullable<Awaited<ReturnType<typeof getUapiDomesticStockV1QuotationsInquireMember>>>
export type GetUapiDomesticStockV1QuotationsInquireDailyItemchartpriceResult = NonNullable<Awaited<ReturnType<typeof getUapiDomesticStockV1QuotationsInquireDailyItemchartprice>>>
export type GetUapiDomesticStockV1QuotationsInquireTimeItemchartpriceResult = NonNullable<Awaited<ReturnType<typeof getUapiDomesticStockV1QuotationsInquireTimeItemchartprice>>>
export type GetUapiDomesticStockV1QuotationsInquireTimeItemconclusionResult = NonNullable<Awaited<ReturnType<typeof getUapiDomesticStockV1QuotationsInquireTimeItemconclusion>>>
export type GetUapiDomesticStockV1QuotationsInquireOvertimePriceResult = NonNullable<Awaited<ReturnType<typeof getUapiDomesticStockV1QuotationsInquireOvertimePrice>>>
export type GetUapiEtfetnV1QuotationsInquireComponentStockPriceResult = NonNullable<Awaited<ReturnType<typeof getUapiEtfetnV1QuotationsInquireComponentStockPrice>>>
export type GetUapiEtfetnV1QuotationsNavComparisonTrendResult = NonNullable<Awaited<ReturnType<typeof getUapiEtfetnV1QuotationsNavComparisonTrend>>>
export type GetUapiDomesticStockV1QuotationsInquireDailyOvertimepriceResult = NonNullable<Awaited<ReturnType<typeof getUapiDomesticStockV1QuotationsInquireDailyOvertimeprice>>>
export type GetUapiDomesticStockV1QuotationsInquireOvertimeAskingPriceResult = NonNullable<Awaited<ReturnType<typeof getUapiDomesticStockV1QuotationsInquireOvertimeAskingPrice>>>
export type GetUapiDomesticStockV1QuotationsInquireTimeDailychartpriceResult = NonNullable<Awaited<ReturnType<typeof getUapiDomesticStockV1QuotationsInquireTimeDailychartprice>>>
export type GetUapiEtfetnV1QuotationsNavComparisonDailyTrendResult = NonNullable<Awaited<ReturnType<typeof getUapiEtfetnV1QuotationsNavComparisonDailyTrend>>>
export type GetUapiEtfetnV1QuotationsNavComparisonTimeTrendResult = NonNullable<Awaited<ReturnType<typeof getUapiEtfetnV1QuotationsNavComparisonTimeTrend>>>
export type GetUapiEtfetnV1QuotationsInquirePriceResult = NonNullable<Awaited<ReturnType<typeof getUapiEtfetnV1QuotationsInquirePrice>>>
export type GetUapiDomesticStockV1QuotationsExpClosingPriceResult = NonNullable<Awaited<ReturnType<typeof getUapiDomesticStockV1QuotationsExpClosingPrice>>>
